The main work should be implementing minimax/alpha-beta and their various
parallel variations/additions. Ideally, the project should be structured such
that you can just "plug in" a game and run whatever parallel/etc. solver we've
written on it. I'm thinking something like this, to achieve a clean separation
between game specification and solver, which also allows for multiple
implementations of solvers. Both classes are something like abstract classes in
Java. I'm using a mix of C++ and SMLish syntax here to write the gist of it out
quickly and clearly.

class Game<State, Move>
    type State
    type Move
    initState : state
    possibleMoves : state -> vector<Move>
    playMove : state * move -> state
    isOver : state -> {-1, 0, 1} where -1 means P1 won, 0 means not over, 1
    means P2 won

-------------------------

class Solver<Game>
    leafEval : state -> int
    bestMove : state -> move
        [Uses Game::possibleMoves, playMove, isOver, etc.]

Chess would be a subclass/implementation of Game. The sequential minimax solver
would be an implementation of Solver.
